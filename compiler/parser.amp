fn parse_file(file: File, program: &LinkedList<Box>) {
    let contents = file.read()

    let i = 0
    let inside = 0
    let buffer = ""
    while i < contents.length {
        let character = contents[i]
        if @or(character == "{", character == "(") {
            inside = inside + 1
        } else if @or(character == "}", character == ")") {
            inside = inside - 1
        }

        if @and(character == "\n", inside == 0) {
            program.append_all(parse_element(buffer))
            buffer = ""
        } else {
            buffer = buffer + character
        }

        i = i + 1
    }
}

fn parse_element(contents: String): LinkedList<Box> {
    if contents.substring(0, 4) == "use " {
        return parse_use(contents)
    } else if contents.substring(0, 3) == "fn " {
        return parse_function(contents)
    }

    return LinkedList<Box>()
}

fn parse_use(contents: &String): LinkedList<Box> {
    let list = LinkedList<Box>()

    let import_file = contents.substring(5, contents.length - 1)

    list.append(Box(UseToken(import_file)))

    return list
}

fn parse_function(contents: &String): LinkedList<Box> {
    let list = LinkedList<Box>()

    let name = contents.substring(3, contents.index("("))
    let parameters = LinkedList<String>()
    let parameters_string = contents.substring(contents.index("(") + 1, contents.index(")"))
    let parameters_split = parameters_string.split(",")
    let i = 0
    while i < parameters_split.length {
        let parameter = parameters_split[i]
        if parameter.length > 0 {
            let parameter_split = parameter.split(":")
            parameters.append(parameter_split[1].strip())
        }
        i = i + 1
    }

    list.append(Box(FunctionToken(name, parameters.to_array())))

    return list
}
