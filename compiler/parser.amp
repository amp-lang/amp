fn parse_file(file: File, program: &LinkedList<Box>, jump_id: &IntegerStore) {
    let contents = file.read()
	program.append_all(parse_elements(contents, jump_id))
}


fn parse_elements(contents: &String, jump_id: &IntegerStore): LinkedList<Box> {
	let list = LinkedList<Box>()

    let i = 0
    let inside = 0
    let buffer = ""
    while i < contents.length {
        let character = contents[i]
        if @or(character == "{", character == "(") {
            inside = inside + 1
        } else if @or(character == "}", character == ")") {
            inside = inside - 1
        }

        if @and(character == "\n", inside == 0) {
	    	if buffer.strip().length > 0 {
            	list.append_all(parse_element(buffer.strip(), jump_id))
            	buffer = ""
	    	}
        } else {
            buffer = buffer + character
        }

        i = i + 1
    }
	if buffer.strip().length > 0 {
        list.append_all(parse_element(buffer.strip(), jump_id))
	}

	return list
}

fn parse_element(contents: String, jump_id: &IntegerStore): LinkedList<Box> {
    if contents.length == 0 {
        return LinkedList<Box>()
    }

    if contents.substring(0, 4) == "use " {
        return parse_use(contents)
    } else if contents.substring(0, 3) == "fn " {
        return parse_function(contents, jump_id)
    } else if contents.substring(0, 7) == "struct " {
        return parse_struct(contents, jump_id)
    } else if contents.substring(0, 4) == "let " {
		return parse_let(contents, jump_id)
    } else if contents.substring(0, 3) == "if " {
		return parse_if(contents, jump_id)
    } else if contents.substring(0, 6) == "while " {
		return parse_while(contents, jump_id)
    } else if @and(contents[0] == "\"", contents[contents.length - 1] == "\"") {
        return parse_string(contents)
	} else if @or(contents == "true", contents == "false") {
		return parse_boolean(contents)
    } else {
        let elements = LinkedList<String>()
        let i = 0
        let inside = 0
        let buffer = ""
        while i < contents.length {
            let character = contents[i]
            if @or(character == "{", character == "(") {
                inside = inside + 1
            } else if @or(character == "}", character == ")") {
                inside = inside - 1
            }

            if @and(character == ",", inside == 0) {
                elements.append(buffer.strip())
                buffer = ""
            } else {
                buffer = buffer + character
            }

            i = i + 1
        }

        if buffer.length > 0 {
            elements.append(buffer.strip())
        }

        if elements.size() > 1 {
            let list = LinkedList<Box>()

            let i = elements.size()
            while i > 0 {
                i = i - 1
                list.append_all(parse_element(elements[i].clone(), jump_id))
            }

            return list
        } else {
            let i = 0
            let inside = 0
            let type = ""
            while i < contents.length {
                let character = contents[i]
                if @or(character == "{", character == "(") {
                    inside = inside + 1
                } else if @or(character == "}", character == ")") {
                    inside = inside - 1
                }

                if @and(character == ".", inside == 0) {
                    type = "."
                } else if @and(@and(character == "(", inside == 1), type == ".") {
		    		type = ".()"
				} else if @and(character == "=", inside == 0) {
					type = "="
				}

                i = i + 1
            }
            
            if type == "." {
                return parse_dot(contents, jump_id)
	    	} else if type == ".()" {
                return parse_invoke_dot(contents, jump_id)
			} else if type == "=" {
				return parse_assign(contents, jump_id)
            } else if contents.index("(") != 999 {
                return parse_invoke(contents, jump_id)
            } else {
	    		return parse_retrieve(contents)
	    	}
        }
    }

    return LinkedList<Box>()
}

fn parse_use(contents: &String): LinkedList<Box> {
    let list = LinkedList<Box>()

    let import_file = contents.substring(5, contents.length - 1)

    list.append(Box(UseToken(import_file)))

    return list
}

fn parse_struct(contents: &String, jump_id: &IntegerStore): LinkedList<Box> {
    let list = LinkedList<Box>()

    let name = contents.substring(7, contents.index("{")).strip()
    let body = contents.substring(contents.index("{") + 1, contents.last_index("}"))
    
    let items = LinkedList<String>()
    let item_types = LinkedList<String>()

    let buffer = ""
    let i = 0
    let inside = 0
    while i < body.length {
        if @or(body[i] == "{", body[i] == "(") {
	    inside = inside + 1
        } else if @or(body[i] == "}", body[i] == ")") {
	    inside = inside - 1
	}

	if @and(body[i] == "\n", inside == 0) {
            if buffer.length > 0 {
	        if buffer.index("{") != 999 {
                    let function_list = parse_function(buffer.strip(), jump_id)
		    let j = 0
		    while j < function_list.size() {
		    	if function_list[j].type == FunctionToken {
			    let function = @cast_&FunctionToken(function_list[j].value)
		    	    function.name = "_." + function.name
			}
			j = j + 1
		    }
                    
		    list.append_all(function_list)
		} else {
        	let split = buffer.strip().split(":")
            items.append(split[0].strip().clone())
            item_types.append(split[1].strip().clone())
		}
            }
            buffer = ""
        } else {
            buffer = buffer + body[i]
        }
        i = i + 1
    }

    let i = 0
    while i < items.size() {
        let item = items[i]

        let getter_name = "_" + item
        let parameters = Array<String>(1)
        parameters[0] = "&" + name

        let instructions = LinkedList<Box>()
		instructions.append(Box(DeclareToken("instance", "&" + name)))
        instructions.append(Box(RetrieveToken("instance")))
        instructions.append(Box(IntegerToken(8 * i)))
        instructions.append(Box(InvokeToken("@add", 2)))
        instructions.append(Box(InvokeToken("@get_8", 1)))
        instructions.append(Box(ReturnToken(1)))

        list.append(Box(FunctionToken(getter_name, parameters, instructions)))
        i = i + 1
    }

    let instructions = LinkedList<Box>()
    let i = 0
    while i < items.size() {
        let item = items[i]
        instructions.append(Box(DeclareToken(item.clone(), item_types[i].clone())))
        i = i + 1
    }

    instructions.append(Box(IntegerToken(items.size() * 8)))
    instructions.append(Box(InvokeToken("@allocate", 1)))
    instructions.append(Box(DeclareToken("instance", "&" + name)))
    instructions.append(Box(StoreToken("instance")))
    let i = 0
    while i < items.size() {
        let item = items[i]
        instructions.append(Box(RetrieveToken(item.clone())))
        instructions.append(Box(RetrieveToken("instance")))
        instructions.append(Box(IntegerToken(8 * i)))
        instructions.append(Box(InvokeToken("@add", 2)))
        instructions.append(Box(InvokeToken("@set_8", 2)))

        i = i + 1
    }
    instructions.append(Box(RetrieveToken("instance")))
    instructions.append(Box(ReturnToken(1)))

    list.append(Box(FunctionToken(name, item_types.to_array(), instructions)))

    return list
}

fn parse_function(contents: &String, jump_id: &IntegerStore): LinkedList<Box> {
    let list = LinkedList<Box>()

    let name = contents.substring(3, contents.index("("))
    let parameters = LinkedList<String>()
    let parameters_string = contents.substring(contents.index("(") + 1, contents.index(")"))
    let parameters_split = parameters_string.split(",")
    let i = 0
    while i < parameters_split.length {
        let parameter = parameters_split[i]
        if parameter.length > 0 {
            let parameter_split = parameter.split(":")
            parameters.append(parameter_split[1].strip())
        }
        i = i + 1
    }

    let instructions = LinkedList<Box>()

    let inner_contents = contents.substring(contents.index("{") + 1, contents.last_index("}")).strip()

    let i = 0
    let inside = 0
    let buffer = ""
    while i < inner_contents.length {
        let character = inner_contents[i]
        if @or(character == "{", character == "(") {
            inside = inside + 1
        } else if @or(character == "}", character == ")") {
            inside = inside - 1
        }

        if @and(character == "\n", inside == 0) {
            instructions.append_all(parse_element(buffer.strip(), jump_id))
            buffer = ""
        } else {
            buffer = buffer + character
        }

        i = i + 1
    }

    if buffer.length > 0 {
        instructions.append_all(parse_element(buffer.strip(), jump_id))
    }

    list.append(Box(FunctionToken(name, parameters.to_array(), instructions)))

    return list
}

fn parse_invoke(contents: &String, jump_id: &IntegerStore): LinkedList<Box> {
    let list = LinkedList<Box>()

    let name = contents.substring(0, contents.index("("))

    let parameters = contents.substring(contents.index("(") + 1, contents.index(")"))
    let parameters_length = parameters.split(",").length
    list.append_all(parse_element(parameters, jump_id))

    list.append(Box(InvokeToken(name, parameters_length)))

    return list
}

fn parse_dot(contents: &String, jump_id: &IntegerStore): LinkedList<Box> {
    let list = LinkedList<Box>()

    let index = 0
    let i = 0
    let inside = 0
    while i < contents.length {
        if contents[i] == "(" {
            inside = inside + 1
        } else if contents[i] == ")" {
            inside = inside - 1
        } else if @and(contents[i] == ".", inside == 0) {
            index = i
        }
        i = i + 1
    }

    list.append_all(parse_element(contents.substring(0, index), jump_id))
    let name = "_" + contents.substring(index + 1, contents.length)
    list.append(Box(InvokeToken(name, 1)))

    return list
}

fn parse_invoke_dot(contents: &String, jump_id: &IntegerStore): LinkedList<Box> {
    let list = LinkedList<Box>()

    let dot_index = 0
    let parenthesis_index = 0
    let i = 0
    let inside = 0
    while i < contents.length {
        if contents[i] == "(" {
            inside = inside + 1

	    if @and(inside == 1, dot_index != 0) {
	    	parenthesis_index = i
	    }
        } else if contents[i] == ")" {
            inside = inside - 1
        } else if @and(contents[i] == ".", inside == 0) {
            dot_index = i
        }
        i = i + 1
    }

    list.append_all(parse_element(contents.substring(0, dot_index), jump_id))
    let name = "_." + contents.substring(dot_index + 1, parenthesis_index)
    list.append(Box(InvokeToken(name, 1)))

    return list
}

fn parse_let(contents: &String, jump_id: &IntegerStore): LinkedList<Box> {
    let list = LinkedList<Box>()

    let name = contents.substring(4, contents.index("="))
    list.append_all(parse_element(contents.substring(contents.index("=") + 1, contents.length).strip(), jump_id))
    list.append(Box(DeclareToken(name.clone(), "")))
    list.append(Box(StoreToken(name)))

    return list
}

fn parse_assign(contents: &String, jump_id: &IntegerStore): LinkedList<Box> {
    let list = LinkedList<Box>()

    let name = contents.substring(0, contents.index("=")).strip()
    list.append_all(parse_element(contents.substring(contents.index("=") + 1, contents.length).strip(), jump_id))
    list.append(Box(StoreToken(name)))

    return list
}

fn parse_if(contents: &String, jump_id: &IntegerStore): LinkedList<Box> {
    let list = LinkedList<Box>()

	let id = jump_id.value
	jump_id.value = jump_id.value + 1

    let condition = contents.substring(3, contents.real_index("{"))
	list.append_all(parse_element(condition.strip(), jump_id))
	list.append(Box(InvokeToken("@not", 1)))
	list.append(Box(JumpConditionalToken(id)))

	let body = contents.substring(contents.real_index("{") + 1, contents.last_index("}")).strip()
	list.append_all(parse_elements(body, jump_id))

	list.append(Box(TargetToken(id)))

    return list
}

fn parse_while(contents: &String, jump_id: &IntegerStore): LinkedList<Box> {
    let list = LinkedList<Box>()

	let stop_id = jump_id.value
	jump_id.value = jump_id.value + 1
	let repeat_id = jump_id.value
	jump_id.value = jump_id.value + 1

    let condition = contents.substring(3, contents.real_index("{"))
	list.append(Box(TargetToken(repeat_id)))
	list.append_all(parse_element(condition.strip(), jump_id))
	list.append(Box(InvokeToken("@not", 1)))
	list.append(Box(JumpConditionalToken(stop_id)))

	let body = contents.substring(contents.real_index("{") + 1, contents.last_index("}")).strip()
	list.append_all(parse_elements(body, jump_id))

	list.append(Box(JumpToken(repeat_id)))
	list.append(Box(TargetToken(stop_id)))

    return list
}

fn parse_string(contents: &String): LinkedList<Box> {
    let list = LinkedList<Box>()

    contents = contents.replace("\\" + "n", "\n")
    list.append(Box(StringToken(contents.substring(1, contents.length - 1))))

    return list
}

fn parse_boolean(contents: &String): LinkedList<Box> {
    let list = LinkedList<Box>()

    list.append(Box(BooleanToken(contents == "true")))

    return list
}

fn parse_retrieve(contents: &String): LinkedList<Box> {
    let list = LinkedList<Box>()

    list.append(Box(RetrieveToken(contents.clone())))

    return list
}

access String {
	fn real_index(string: &String, character: &String): integer {
        let i = 0
		let in_quotes = false
        while i < string.length {
			if string[i] == "\"" {
				in_quotes = @not(in_quotes)
			} else if @and(string[i] == character, @not(in_quotes)) {
                return i
            }
            i = i + 1
        }

        return 999
	}
}
