fn print(string) {
    print_size(String.pointer(string), String.length(string));
};

fn println(string) {
    print(string);
    print("\n");
};

fn error(string) {
    error_size(string, length(string));
};

fn errorln(string) {
    error(string);
    error("\n");
};

fn read() {
    let string = allocate(128);
    read_size(string, 128);
    return String.new(string);
};

fn concatenate(string1, string2) {
    let string1_length = String.length(string1);
    let string2_length = String.length(string2);
    let new_memory = allocate(add(add(string1_length, string2_length), 1));
    copy(String.pointer(string1), new_memory, string1_length);
    copy(String.pointer(string2), add(new_memory, string1_length), add(1, string2_length));
    return String.new(new_memory);
};

fn int_to_string(integer) {
    let string = "";
    if (equal(integer, 0)) {
        string = "0";
    };

    while (greater(integer, 0)) {
        let modulo = modulo(integer, 10);
        integer = divide(integer, 10);
        string = concatenate(String.new(store(add(modulo, 48))), string);
    };
    return string;
};

fn store(value) {
    let new_memory = allocate(1);
    set_1(value, new_memory);
    return new_memory;
};

fn not_equal(value1, value2) {
    return not(equal(value1, value2));  
};

struct Array {
    pointer;
    length;
};

fn Array.new(size) {
    return Array.new(allocate(multiply(size, 8)), size);
};

fn Array.set(array, index, value) {
    set_8(value, add(Array.pointer(array), multiply(index, 8)));
};

fn Array.get(array, index) {
    return get_8(add(Array.pointer(array), multiply(index, 8)));
};

struct String {
    pointer;
    length;
};

fn String.new(pointer) {
    return String.new(pointer, length(pointer));
};