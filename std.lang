fn print(string) {
    print_size(string, length(string));
};

fn println(string) {
    print(string);
    print("\n");
};

fn error(string) {
    error_size(string, length(string));
};

fn errorln(string) {
    error(string);
    error("\n");
};

fn read(): string {
    let string = malloc(128);
    read_size(string, 128);
    return string;
};

fn concatenate(string1, string2) {
    let string1_length = length(string1);
    let string2_length = length(string2);
    let new_memory = malloc(add(add(string1_length, string2_length), 1));
    copy(string1, new_memory, string1_length);
    copy(string2, add(new_memory, string1_length), add(1, string2_length));
    return new_memory;
};

fn int_to_string(integer) {
    let string = "";
    if (equal(integer, 0)) {
        string = "0";
    };

    while (greater(integer, 0)) {
        let modulo = modulo(integer, 10);
        integer = divide(integer, 10);
        string = concatenate(store(add(modulo, 48)), string);
    };
    return string;
};

fn store(value) {
    let new_memory = malloc(1);
    set_1(value, new_memory);
    return new_memory;
};

fn not_equal(value1, value2) {
    return not(equal(value1, value2));  
};

fn new_array(size) {
    let new_memory = malloc(multiply(size, 8));
    return new_memory;
};

fn set_array(array, index, value) {
    set_8(value, add(array, multiply(index, 8)));
};

fn get_array(array, index) {
    return get_8(add(array, multiply(index, 8)));
};