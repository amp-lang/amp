function _start() {
    asm call main;
    asm mov rax, 60;
    asm xor rdi, rdi;
    asm syscall;
};

function print(string s) {
    print_size(s, length(s));
};

function print_size(string s, int size) {
    push 1;
    push 1;
    push s;
    push size;
    asm pop rdx;
    asm pop rsi;
    asm pop rdi;
    asm pop rax;
    asm syscall;
};

function println(string s) {
    print(s);
};

function length(string s): long {
    push s;
    asm pop rdi;
    asm xor rax, rax;
    asm mov rcx, -1;
    asm cld;
    asm repne scasb;
    asm not rcx;
    asm dec rcx;
    asm push rcx;
    variable return_var = pop;
    return return_var;
};

function concat(string s1, string s2): string {
    variable new_memory = malloc(16);
    variable length1 = length(s1);
    push s1;
    asm pop rcx;
    push new_memory;
    asm pop rdi;
    asm cld;
    asm repnz movsb;
    variable length2 = length(s2);
    variable total_length = add(length1, length2);
    push s2;
    asm pop rcx;
    asm repnz movsb;
    return new_memory;
};

function add(int int1, int int2): int {
    push int1;
    push int2;
    asm pop rdi;
    asm pop rsi;
    asm add rdi, rsi;
    asm push rdi;
    variable return_value = pop;
    return return_value;
};

function malloc(int size): int {
    asm mov rax, 45;
    asm xor rbx, rbx;
    asm syscall;
    push size;
    asm pop rdi;
    asm add rax, rdi;
    asm mov rbx, rax;
    asm mov rax, 45;
    asm syscall;
    asm sub rax, rdi;
    asm push rax;
    variable return_var = pop;
    return return_var;
};

function test() {
    return concat("Hello World!", " test");
};

function main() {
    variable test = test();
};