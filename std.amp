print(string: &String) {
    @print_size(string.pointer, string.length)
}

println(string: &String) {
    print(string)
    print("\n")
}

error(string: String) {
    @error_size(string, length(string))
}

errorln(string: String) {
    error(string)
    error("\n")
}

read(): String {
    let string = @allocate(128)
    @read_size(string, 128)
    return String(string, 128)
}

execute_command(file: String, arguments: Array, wait: boolean) {
	let null_terminated_file = file + "\0"
	let arguments_new = Array(arguments.length + 1)
	let i = 0
	while (i < arguments.length) {
		let thing = @cast_&String(arguments[i]) + "\0"
		arguments_new[i] = @cast_any(thing.pointer_consume())
		i = i + 1
	}

	@execute(null_terminated_file.pointer, arguments_new.pointer, wait)

	let i = 0
	while (i < arguments_new.length - 1) {
		let argument = arguments_new[i]
		@free(argument, length(argument) + 1)
		i = i + 1
	}

    print("")
}

length(string: &any): integer {
    let location = string
    let i = 0

    while (true) {
        if (@get_1(location) == 0) {
            return i
        }
        location = location + 1
        i = i + 1
    }

    return 999
}

_+(string1: &String, string2: &String): String {
    let string1_length = string1.length
    let string2_length = string2.length
    let new_memory = @allocate(string1_length + string2_length)
    @copy(string1.pointer, new_memory, string1_length)
    @copy(string2.pointer, new_memory + string1_length, string2_length)
    return String(new_memory, string1_length + string2_length)
}

integer_to_string(integer: integer): String {
    let string = ""
    if (integer == 0) {
        string = "0"
    }
    
    while (integer > 0) {
        let modulo = integer % 10
        integer = integer / 10
        let prepended_string = String(store(modulo + 48), 1)
        string = prepended_string +string
    }

    return string
}

boolean_to_string(boolean: boolean): String {
    if (boolean == 1) {
        return "true"
    }
    return "false"
}

store(value: integer): any {
    let new_memory = @allocate(1)
    @set_1(value, new_memory)
    return new_memory
}

not_equal(value1: &any, value2: &any): boolean {
    return @not(@equal(value1, value2))  
}

Array {
    pointer: any
    length: integer
	item_size: integer

	(pointer: any, length: integer): Array {
	    return Array(pointer, length, 0)
	}
	
	(size: integer): Array {
	    return Array(@allocate(size * 8), size)
	}

	(size: integer, memory_size: integer): Array {
	    return Array(@allocate(size * 8), size, memory_size)
	}

	free_custom(array: &Array) {
		if (array.item_size > 0) {
			let i = 0
			while (i < array.length) {
				if (@not(array[i] == 0)) {
					@free(array[i], array.item_size)
				}
				i = i + 1
			}
		}
		@free(array.pointer, array.length * 8)
	}
}

_[]=(array: &Array, index: integer, value: any) {
    @set_8(@cast_integer(value), array.pointer + (index * 8))
}

_[](array: &Array, index: integer): &any {
    return @get_8(array.pointer + (index * 8))
}

Function {
    pointer: any

	call(function: &Function, parameters: Array): any {
	    return @call_function(function.pointer, parameters.pointer, parameters.length)
	}
}

String {
    pointer: any
    length: integer
    static: boolean

	(pointer: any): String {
	    return String(pointer, length(pointer), false)
	}
	
	(pointer: any, length: integer): String {
	    return String(pointer, length, false)
	}

	free_custom(string: &String) {
		if (@not(string.static)) {
			@free(string.pointer, string.length)
		}
	}
}

_==(string1: String, string2: String): boolean {
    if (string1.length != string2.length) {
        return false
    }

    let i = 0
    while (i < string1.length) {
        if (@get_1(string1.pointer + i) != @get_1(string2.pointer + i)) {
            return false
        }

        i = i + 1
    }

    return true
}

null(): any {
    return 0
}

LinkedList {
    head: any
	item_size: integer

	(item_size: integer): LinkedList {
		return LinkedList(LinkedList_Node(null(), null(), item_size), item_size)
	}
	
	(): LinkedList {
	    return LinkedList(0)
	}

	append(linked_list: &LinkedList, data: any) {
	    let node = @cast_&LinkedList_Node(linked_list.head)
	    while (node.next != null()) {
	        node = @cast_&LinkedList_Node(node.next)
	    }
	
	    let new_node = LinkedList_Node(data, null(), linked_list.item_size)
	    node.next = new_node
	}

	insert(linked_list: &LinkedList, index: integer, data: any) {
	    let node = @cast_&LinkedList_Node(linked_list.head)
	
	    let i = 0
	    while (i < index) {
	        node = @cast_&LinkedList_Node(node.next)
	        i = i + 1
	    }
	
	    let temp_next = node.next
	    let new_node = LinkedList_Node(data, @cast_any(temp_next), linked_list.item_size)
	    node.next = new_node
	}

	remove(linked_list: &LinkedList, index: integer) {
	    let node = @cast_&LinkedList_Node(linked_list.head)
	
	    let i = 0
	    while (i < index) {
	        node = @cast_&LinkedList_Node(node.next)
	        i = i + 1
	    }
	
	    let temp_next_next = @cast_&LinkedList_Node(node.next).next
		@cast_&LinkedList_Node(node.next).free_custom()
		@free(node.next, LinkedList_Node.memory_size())
	    node.next = @cast_any(temp_next_next)
	}

	to_array(linked_list: LinkedList): Array {
	    let size = linked_list.size()
	    let array = Array(size)
	    let i = 0
	    let node = @cast_LinkedList_Node(linked_list.head_consume())
	
	    while (node.next != 0) {
			let prev_node: &LinkedList_Node = node
	        node = @cast_LinkedList_Node(@cast_any(node.next_consume()))
			let next = prev_node.next
	        array[i] = @cast_any(node.data)
	        i = i + 1
	    }
	
	    return array
	}
	
	free_custom(list: &LinkedList) {
		let node = list.head
		while (node != 0) {
			let new_node = @cast_&LinkedList_Node(node).next
			@cast_&LinkedList_Node(node).free_custom()
			@free(node, LinkedList_Node.memory_size())
			node = new_node
		}
	}

	size(linked_list: &LinkedList): integer {
	    let node = @cast_&LinkedList_Node(linked_list.head)
	    let i = 0
	
	    while (node.next != null()) {
	        node = @cast_&LinkedList_Node(node.next)
	        i = i + 1
	    }
	
	    return i
	}
}

_[](linked_list: &LinkedList, index: integer): &any {
    let node = @cast_&LinkedList_Node(linked_list.head)
    let i = 0

    while (i < (index + 1)) {
        node = @cast_&LinkedList_Node(node.next)
        i = i + 1
    }

    return node.data
}

LinkedList_Node {
    data: any
    next: any
	item_size: integer

	free_custom(node: &LinkedList_Node) {
		if (node.item_size != 0) {
			@free(node.data, node.item_size)
		}
	}
}

Option {
    data: any
	item_size: integer

	empty(): Option {
	    return Option(null(), 0)
	}
	
	of(data: any): Option {
	    return Option.of(data, 0)
	}
	
	of(data: any, item_size: integer): Option {
	    return Option(data, item_size)
	}

	is_value(option: &Option): boolean {
	    return not_equal(option.data, null())
	}
	
	free_custom(option: &Option) {
		let test = option.data != null()
		let test2 = option.item_size > 0
		if (@and(test, test2)) {
			@free(option.data, option.item_size)
		}
	}
}

_+(value1: any, value2: any): any {
    return @add(value1, value2)
}

_+(value1: integer, value2: integer): integer {
    return @cast_integer(@add(value1, value2))
}

_-(value1: any, value2: any): any {
    return @subtract(value1, value2)
}

_-(value1: integer, value2: integer): integer {
    return @cast_integer(@subtract(value1, value2))
}

_%(value1: integer, value2: integer): integer {
    return @cast_integer(@modulo(value1, value2))
}

_/(value1: integer, value2: integer): integer {
    return @cast_integer(@divide(value1, value2))
}

_*(value1: integer, value2: integer): integer {
    return @cast_integer(@multiply(value1, value2))
}

_<(value1: integer, value2: integer): boolean {
    return @less(value1, value2)
}

_>(value1: integer, value2: integer): boolean {
    return @greater(value1, value2)
}

_==(value1: any, value2: any): boolean {
    return @equal(value1, value2)
}

_!=(value1: &any, value2: &any): boolean {
    return not_equal(value1, value2)
}
